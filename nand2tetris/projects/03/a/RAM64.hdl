// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=D1, b=D2, c=D3, d=D4, e=D5, f=D6, g=D7, h=D8);
    RAM8(in=in, load=D1, address=address[0..2], out=RO1);
    RAM8(in=in, load=D2, address=address[0..2], out=RO2);
    RAM8(in=in, load=D3, address=address[0..2], out=RO3);
    RAM8(in=in, load=D4, address=address[0..2], out=RO4);
    RAM8(in=in, load=D5, address=address[0..2], out=RO5);
    RAM8(in=in, load=D6, address=address[0..2], out=RO6);
    RAM8(in=in, load=D7, address=address[0..2], out=RO7);
    RAM8(in=in, load=D8, address=address[0..2], out=RO8);
    Mux8Way16(a=RO1, b=RO2, c=RO3, d=RO4, e=RO5, f=RO6, g=RO7, h=RO8, sel=address[3..5], out=out);
    // Put your code here:
}